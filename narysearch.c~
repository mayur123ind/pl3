#include<stdio.h>
#include<stdlib.h>

#include<math.h>

int main()
{
	int size,key,left,right,inv,n,i,j,a;
	int arr[10],sep[10];
	
	printf("Enter the size of an array:");
	scanf("%d",&size);
	printf("Enter the elements of the array:\n");
	for(i=0;i<size;i++)
	{
		scanf("%d",&arr[i]);
	}
	printf("Enter the number of partition:");
	scanf("%d",&n);
	printf("Enter the key value to search:");
	scanf("%d",&key);
	
	left=0;
	right=size-1;
	
	if(key>=array[left] && key<=array[right])
  	{
	   	while(left!=right)
	   	{
	     	     	printf("left=%d, right=%d, size=%d\n",left,right,size);
		     	if(size<=n)		//imp executed at second
		     	{
			      	#pragma parallel for num_threads(size)
			       	for(i=0;i<size;i++)
				{
				 	sep[i]=left+i;
				 	tid=omp_get_thread_num();
				 	printf("Thread %d allocated sep[%d]=%d\n",tid,i,array[sep[i]]);
				}
	      		}
	      
	     		else
	      		{	//executed first
	      			#pragma parallel for num_threads(n-1)		
	       			sep[0]=left;
	       			interval=ceil((float)size/(float)n);
	     
	     
	       			for(i=1;i<=n-1;i++)
				{
					sep[i]=left+(interval*i)-1;
					tid=omp_get_thread_num();
					printf("Thread %d allocated sep[%d]=%d\n",tid,i,array[sep[i]]);
				}
		
	      			sep[n]=right;
	       		}
	       
	      		for(i=0;i<=n;i++)
	       		{
		 		if(key==array[sep[i]])
		  		{
					index=sep[i];
					printf("Element is at position %d\n",index);
					break_value=1;
					break;
		  		}
		 		if(key<array[sep[i]])
		  		{
					right=sep[i];
					if(i!=0);
					left=1+sep[i-1];
					size=right-left+1;
					break;
				}
	       		}
	      		if(break_value==1)
			break;
   		}
	}
	if(left==right || !(key>=array[left] && key<=array[right]))
	printf("Element not found\n");
	
	return 0;
}
				
	
	
